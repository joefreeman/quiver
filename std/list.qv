
list :: Nil | Cons[int, &];

math = %"math",

length' = #[list, int] {
  | ~> =[Nil, x] => x
  | ~> =[Cons[_, rest], x] => math.add[x, 1] ~> &[rest, ~]
},

reverse' = #[list, list] {
  | ~> =[Nil, xs] => xs
  | ~> =[Cons[head, tail], xs] => Cons[head, xs] ~> &[tail, ~]
},

concat' = #[list, list, list] {
  | ~> =[Nil, a, b] => [b, a] ~> reverse'
  | ~> =[Cons[head, tail], a, b] => Cons[head, b] ~> &[tail, a, ~]
},

map' = #[list, #int -> int, list] {
  | ~> =[Nil, _, acc] => [acc, Nil] ~> reverse'
  | ~> =[Cons[head, tail], f, acc] => {
    head ~> f ~> Cons[~, acc] ~> &[tail, f, ~]
  }
},

filter' = #[list, #int -> (Ok | []), list] {
  | ~> =[Nil, _, acc] => [acc, Nil] ~> reverse'
  | ~> =[Cons[head, tail], pred, acc], head ~> pred =>
    [tail, pred, Cons[head, acc]] ~> &
  | ~> =[Cons[_, tail], pred, acc] => &[tail, pred, acc]
},

take' = #[list, int, list] {
  | ~> =[Nil, _, acc] => [acc, Nil] ~> reverse'
  | ~> =[_, 0, acc] => [acc, Nil] ~> reverse'
  | ~> =[Cons[head, tail], n, acc] => {
    math.sub[n, 1] ~> &[tail, ~, Cons[head, acc]]
  }
},

[
  new: #{ Nil },

  head: #list {
    ~> =Cons[head, _] => head
  },

  tail: #list {
    ~> =Cons[_, tail] => tail
  },

  empty?: #list { ~> =Nil => Ok },

  prepend: #[list, int] {
    ~> =[xs, x] => Cons[x, xs]
  },

  append: #[list, int] {
    ~> =[xs, x] => {
      reversed = [xs, Nil] ~> reverse',
      [Cons[x, reversed], Nil] ~> reverse'
    }
  },

  concat: #[list, list] {
    ~> =[xs, ys] => concat'[xs, ys, Nil]
  },

  length: #list {
    ~> =xs => [xs, 0] ~> length'
  },

  reverse: #list {
    ~> =xs => [xs, Nil] ~> reverse'
  },

  at: #[list, int] {
    | ~> =[Nil, _] => []
    | ~> =[Cons[h, _], 0] => h
    | ~> =[Cons[_, t], n] => math.sub[n, 1] ~> &[t, ~]
  },

  map: #[list, #int -> int] {
    ~> =[xs, f] => map'[xs, f, Nil]
  },

  filter: #[list, #int -> (Ok | [])] {
    ~> =[xs, f] => filter'[xs, f, Nil]
  },

  drop: #[list, int] {
    | ~> =[Nil, _] => Nil
    | ~> =[xs, 0] => xs
    | ~> =[Cons[_, tail], n] =>
      math.sub[n, 1] ~> &[tail, ~]
  },

  take: #[list, int] {
    ~> =[xs, x] => take'[xs, x, Nil]
  },

  contains?: #[list, int] {
    | ~> =[Nil, _] => []
    | ~> =[Cons[^value, _], ^value] => Ok
    | ~> =[Cons[_, tail], value] => &[tail, value]
  },

  all?: #[list, #int -> (Ok | [])] {
    | ~> =[Nil, _] => Ok
    | ~> =[Cons[head, tail], pred], head ~> pred => &[tail, pred]
    | ~> =[Cons[_, _], _] => []
  },

  any?: #[list, #int -> (Ok | [])] {
    | ~> =[Nil, _] => []
    | ~> =[Cons[head, tail], pred], head ~> pred => Ok
    | ~> =[Cons[_, tail], pred] => &[tail, pred]
  }
]
