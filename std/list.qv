math = %"math";

type list = Nil | Cons[int, list];

length' = #[list, int] {
  | Nil = $.0 => $.1
  | Cons[_, rest] = $.0 =>
    [$.1, 1] ~> math.add ~> [rest, ~] ~> &
}

reverse' = #[list, list] {
  | Nil = $.0 => $.1
  | Cons[head, tail] = $.0 =>
    [tail, Cons[head, $.1]] ~> &
}

concat' = #[list, list, list] {
  | Nil = $.0 => [$.2, $.1] ~> reverse'
  | Cons[head, tail] = $.0 =>
    [tail, $.1, Cons[head, $.2]] ~> &
}

map' = #[list, #int -> int, list] {
  | Nil = $.0 => [$.2, Nil] ~> reverse'
  | Cons[head, tail] = $.0 =>
    [tail, $.1, Cons[head ~> $.1, $.2]] ~> &
}

filter' = #[list, #int -> (Ok | []), list] {
  | Nil = $.0 => [$.2, Nil] ~> reverse'
  | Cons[head, tail] = $.0, Ok = head ~> $.1 =>
    [tail, $.1, Cons[head, $.2]] ~> &
  | Cons[head, tail] = $.0 => [tail, $.1, $.2] ~> &
}

take' = #[list, int, list] {
  | [Nil, _, _] = $ =>
    [$.2, Nil] ~> reverse'
  | [_, 0, acc] = $ =>
    [acc, Nil] ~> reverse'
  | [Cons[head, tail], n, acc] = $ =>
    [n, 1]
    ~> math.sub
    ~> [tail, ~, Cons[head, acc]]
    ~> &
}

[
  new: #{ Nil },

  head: #list { [head, _] = $ => head },

  tail: #list { [_, tail] = $ => tail },

  empty?: #list { Nil = $ => Ok },

  prepend: #[list, int] { Cons[$.1, $.0] },

  append: #[list, int] {
    reversed = [$.0, Nil] ~> reverse',
    [Cons[$.1, reversed], Nil] ~> reverse'
  },

  concat: #[list, list] { [$.0, $.1, Nil] ~> concat' },

  length: #list { [$, 0] ~> length' },

  reverse: #list { [$, Nil] ~> reverse' },

  at: #[list, int] {
    | [Nil, _] = $ => []
    | [Cons[h, _], 0] = $ => h
    | [Cons[_, t], n] = $ => [t, [n, 1] ~> math.sub] ~> &
  },

  map: #[list, #int -> int] { [$.0, $.1, Nil] ~> map' },

  filter: #[list, #int -> (Ok | [])] { [$.0, $.1, Nil] ~> filter' },

  drop: #[list, int] {
    | [Nil, _] = $ => Nil
    | [lst, 0] = $ => lst
    | [Cons[_, tail], n] = $ =>
      [n, 1] ~> math.sub ~> [tail, ~] ~> &
  },

  take: #[list, int] { [$.0, $.1, Nil] ~> take' },

  contains?: #[list, int] {
    | [Nil, _] = $ => []
    | [Cons[head, tail], value] = $, [head, value] ~> == => Ok
    | [Cons[_, tail], value] = $ => [tail, value] ~> &
  },

  all?: #[list, #int -> (Ok | [])] {
    | [Nil, _] = $ => Ok
    | [Cons[head, tail], pred] = $, Ok = head ~> pred => [tail, pred] ~> &
    | [Cons[_, _], _] = $ => []
  },

  any?: #[list, #int -> (Ok | [])] {
    | [Nil, _] = $ => []
    | [Cons[head, tail], pred] = $, Ok = head ~> pred => Ok
    | [Cons[_, tail], pred] = $ => [tail, pred] ~> &
  }
];
