// Define a recursive list type
list<t> : Nil | Cons[t, &];

// Import standard library
math = %"math",

// Compute the sum of a list using tail recursion
sum' = #[list<int>, int] {
  | ~> =[Nil, acc] => acc
  | ~> =[Cons[head, tail], acc] => {
    [head, acc]
    ~> math.add
    ~> [tail, ~]
    ~> &
  }
},

sum = #list<int> { ~> [~, 0] ~> sum' },

#{
  // Build and sum a list
  xs = Cons[1, Cons[2, Cons[3, Nil]]],
  xs ~> sum
}
